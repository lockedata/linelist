% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/top_values.R
\name{top_values}
\alias{top_values}
\alias{top_values.default}
\alias{top_values.factor}
\alias{top_values.character}
\title{Recode factors, keeping only most frequent levels}
\usage{
top_values(x, n, ...)

\method{top_values}{default}(x, n, ...)

\method{top_values}{factor}(x, n, replacement = "other",
  ties.method = "first", ...)

\method{top_values}{character}(x, n, replacement = "other",
  ties.method = "first", ...)
}
\arguments{
\item{x}{a \code{factor} or a \code{character} vector}

\item{n}{the number of levels or values to keep}

\item{...}{further arguments passed to \code{\link[forcats:fct_lump]{forcats::fct_lump()}}.}

\item{replacement}{a single value to replace the less frequent values with}

\item{ties.method}{how to deal with ties when ranking factor levels. This
defaults to "first", which is passed on to \code{\link[=rank]{rank()}}.}
}
\description{
This function is a generic, with methods for \code{factor} and \code{character}
objects. It lists all unique values in the input, ranks them from the most to
the least frequent, and keeps the top \code{n} values. Other values are replaced
by the chosen replacement. Under the hood, this uses \code{\link[forcats:fct_lump]{forcats::fct_lump()}}
and \code{\link[forcats:fct_recode]{forcats::fct_recode()}}.
}
\examples{

## make toy data
x <- sample(letters[1:10], 100, replace = TRUE)
sort(table(x), decreasing = TRUE)

## keep top values
top_values(x, 2) # top 2
top_values(x, 2, NA) # top 3, replace with NA
top_values(x, 0) # extreme case, keep nothing

## dealing with ties
x <- c("a", "b", "a", "b", "c")

## in the case of a tie (a, b), the first value is ranked higher than the
## others
top_values(x, n = 1)

## here, the ties are ranked in reverse order, so b comes before a
top_values(x, n = 1, ties.method = "last")
}
\author{
Thibaut Jombart, Zhian N. Kamvar
}
